Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
ggdata
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the sharp null
# t_null <- replicate(B, {
#   A_perm <- sample(A)
#   Y_perm <- A_perm * Y1 + (1 - A_perm) * Y0
#   abs(mean(Y_perm[A_perm == 1]) - mean(Y_perm[A_perm == 0]))
# })
# pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
results
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(results$power_sharp, results$power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
results$power_sharp
results
results$power_sharp
results
type(results)
class(results)
results
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
power_sharp
power_weak
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
ggdata
ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
ggdata
ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
B <- 100L
B
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Set number of permutations (B) and significance level (alpha)
B <- 100
alpha <- 0.05
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(B, function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
plot <- ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
plot <- ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
results
ggdata
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
plot <- ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
plot
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- t.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
power_sharp <- sapply(results, function(x) x$power_sharp)
power_weak <- sapply(results, function(x) x$power_weak)
ggdata <- data.frame(
SampleSize = rep(n1, times = 2),
Power = c(power_sharp, power_weak),
Hypothesis = factor(rep(c("Sharp Null", "Weak Null"), each = length(n1)))
)
plot <- ggplot(ggdata, aes(x = SampleSize, y = Power, color = Hypothesis, group = Hypothesis)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("Sharp Null" = "cornflowerblue", "Weak Null" = "coral")) +
theme_minimal() +
labs(x = "Sample Size", y = "Power",
title = "Power of Tests for Sharp vs. Weak Null")
plot
library(fastverse)
library(tidyverse)
library(patchwork)
library(ggsci)
# Parameters
n1 <- c(10, 25, 50, 100, 250)
n0 <- c(10, 25, 50, 100, 250)
n_sim <- 1000
# Set number of permutations (B) and significance level (alpha)
B <- 100L
alpha <- 0.05
# Simulation function
sim <- function(n1, n0, B, alpha) {
# Placeholder for p-values
pval_sharp <- numeric(n_sim)
pval_weak <- numeric(n_sim)
for (i in 1:n_sim) {
# Randomize treatment
A <- sample(c(rep(1, n1), rep(0, n0)))
# Generate outcomes
Y1 <- rnorm(n1, mean = 1/10, sd = sqrt(1/16))
Y0 <- rnorm(n0, mean = 0, sd = sqrt(1/16))
Y <- A * Y1 + (1 - A) * Y0
# Observed value of difference-in-means test statistic
t_obs <- abs(mean(Y[A == 1]) - mean(Y[A == 0]))
# Testing under the sharp null
# Generate null distribution of test statistic under sharp null hypothesis
# Permute treatment assignment B times
t_null <- lapply(seq_len(B), function(j) {
# Randomly permute treatment assignments
A_perm <- sample(A)
# Calculate test statistic under the permuted treatment assignments
t_perm <- abs(mean(Y[A_perm == 1]) - mean(Y[A_perm == 0]))
# Return test statistic for each permutation
return(t_perm)
})
t_null <- do.call(c, t_null)
pval_sharp[i] <- mean(t_null >= t_obs)
# Testing under the weak null
pval_weak[i] <- z.test(Y ~ A)$p.value
}
# Power calculation
power_sharp <- mean(pval_sharp < alpha)
power_weak <- mean(pval_weak < alpha)
return(list(power_sharp = power_sharp, power_weak = power_weak))
}
results <- Map(sim, n1, n0, MoreArgs = list(B = B, alpha = alpha))
# Import codified data
codes <- read.csv("codified", header=TRUE)
library(Matrix)
df <- read.csv("patient_level_codes.csv")
df <- read.csv("patient_level_codes.csv")
# If pa
head(df)
library(Matrix)
df <- read.csv("patient_level_codes.csv")
head(df)
names(df)["patient_num"] <- "patient"
names(df)
?rename
df <- df %>%
rename(patient = patient_num, code = parent_code)
library(dplyr)
df <- df %>%
rename(patient = patient_num, code = parent_code)
names(df)
class(df$code)
head(df)
df$code <- as.numeric(as.factor(df$code))
df$code
library(Matrix)
library(dplyr)
df <- read.csv("patient_level_codes.csv")
head(df)
df <- df %>% rename(patient = patient_num, code = parent_code)
head(df)
patient_num <- as.numeric(as.factor(df$patient_num))
patient_num
patient_num <- as.numeric(as.factor(df$patient_num))
patient_num
patient <- as.numeric(as.factor(df$patient))
patient
df$code_index <- as.numeric(as.factor(df$code))
df$patient_index <- as.numeric(as.factor(df$patient))
head(df)
sparse_matrix <- sparseMatrix(i = df$patient_index,
j = df$code_index,
x = df$count,
dims = c(max(df$patient_index), max(df$code_index)))
sparse_matrix
head(df)
patient_mapping <- levels(as.factor(df$patient))
code_mapping <- levels(as.factor(df$code))
patient_mapping
code_mapping
View(df)
head(df)
rownames(sparse_matrix) <- patient_mapping[df$patient_index]
